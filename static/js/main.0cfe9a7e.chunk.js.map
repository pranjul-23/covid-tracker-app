{"version":3,"sources":["components/Cards/Cards.js","api/index.js","components/CountryPicker/CountryPicker.js","components/Chart/Chart.js","assets/images/covid-img.png","App.js","index.js"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","active","updated","console","log","fetchDailyData","dailyData","formatDailyData","map","date","reportDate","fetchCountries","countryObj","dailyCases","calculateDailyChanges","cases","dailyDeaths","dailyRecovered","Object","keys","cumulativeData","dates","dailyChanges","i","length","currentDate","previousDate","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchedCountriesData","erro","fetchApi","FormControl","NativeSelect","defaultValue","onChange","e","target","value","Chart","setDailyData","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","App","covidData","setCovidData","setCountry","fetchedData","fetchedCovidData","src","covidImg","alt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0cfe9a7e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport \"./Cards.css\";\r\n\r\nconst Cards = ({ data }) => {\r\n  const { confirmed, recovered, deaths, lastUpdate } = data;\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n  return (\r\n    <div className=\"card-container\">\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className=\"card infected\">\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={confirmed} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className=\"card recovered\">\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={recovered} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recoveries from COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className=\"card deaths\">\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={deaths} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of death cause by COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\nconst url = \"https://disease.sh/v3/covid-19\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = `${url}/all`;\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n  try {\r\n    const { data } = await axios.get(changeableUrl);\r\n    const modifiedData = {\r\n      confirmed: data.active,\r\n      recovered: data.recovered,\r\n      deaths: data.deaths,\r\n      lastUpdate: data.updated,\r\n    };\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/historical/all?lastdays=30`);\r\n    const dailyData = formatDailyData(data);\r\n    const modifiedData = dailyData.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed,\r\n      deaths: dailyData.deaths,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/countries`);\r\n    return data.map((countryObj) => countryObj.country);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nfunction formatDailyData(data) {\r\n  const dailyCases = calculateDailyChanges(data.cases);\r\n  const dailyDeaths = calculateDailyChanges(data.deaths);\r\n  const dailyRecovered = calculateDailyChanges(data.recovered);\r\n\r\n  // Combine into an array of daily summaries\r\n  return Object.keys(dailyCases).map((date) => ({\r\n    reportDate: date,\r\n    confirmed: dailyCases[date],\r\n    deaths: dailyDeaths[date],\r\n    recovered: dailyRecovered[date],\r\n  }));\r\n}\r\n\r\nfunction calculateDailyChanges(cumulativeData) {\r\n  const dates = Object.keys(cumulativeData);\r\n  const dailyChanges = {};\r\n\r\n  for (let i = 1; i < dates.length; i++) {\r\n    const currentDate = dates[i];\r\n    const previousDate = dates[i - 1];\r\n    dailyChanges[currentDate] =\r\n      cumulativeData[currentDate] - cumulativeData[previousDate];\r\n  }\r\n\r\n  return dailyChanges;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nfunction CountryPicker({ handleCountryChange }) {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      try {\r\n        const fetchedCountriesData = await fetchCountries();\r\n        setFetchedCountries(fetchedCountriesData);\r\n      } catch (error) {\r\n        console.erro(\"Failed to fetch data:\", error);\r\n      }\r\n    };\r\n    fetchApi();\r\n  }, []);\r\n  return (\r\n    <FormControl className=\"form-control\">\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport \"./Chart.css\";\r\n\r\nfunction Chart({ data, country }) {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      try {\r\n        const dailyData = await fetchDailyData();\r\n        setDailyData(dailyData);\r\n      } catch (error) {\r\n        console.erro(\"Failed to fetch data:\", error);\r\n      }\r\n    };\r\n    fetchApi();\r\n  }, []);\r\n\r\n  const lineChart =\r\n    dailyData && dailyData.length ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [\r\n            {\r\n              data: dailyData.map(({ confirmed }) => confirmed),\r\n              label: \"Infected\",\r\n              borderColor: \"#333fff\",\r\n              fill: true,\r\n            },\r\n            {\r\n              data: dailyData.map(({ deaths }) => deaths),\r\n              label: \"Deaths\",\r\n              borderColor: \"red\",\r\n              backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n              fill: true,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null;\r\n\r\n  const barChart = data.confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [data.confirmed, data.recovered, data.deaths],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: true },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n  return (\r\n    <div className=\"chart-container\">{country ? barChart : lineChart}</div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","export default __webpack_public_path__ + \"static/media/covid-img.9e5d4fc7.png\";","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Cards from \"./components/Cards/Cards\";\r\nimport CountryPicker from \"./components/CountryPicker/CountryPicker\";\r\nimport Chart from \"./components/Chart/Chart\";\r\nimport { fetchData } from \"./api\";\r\nimport covidImg from \"./assets/images/covid-img.png\";\r\n\r\nfunction App() {\r\n  const [covidData, setCovidData] = useState({});\r\n  const [country, setCountry] = useState(\"\");\r\n\r\n  const handleCountryChange = async (country) => {\r\n    try {\r\n      const fetchedData = await fetchData(country);\r\n      setCovidData(fetchedData);\r\n      setCountry(country);\r\n    } catch (error) {\r\n      console.erro(\"Failed to fetch data:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchedCovidData = async () => {\r\n      try {\r\n        const data = await fetchData();\r\n        setCovidData(data);\r\n      } catch (error) {\r\n        console.erro(\"Failed to fetch data:\", error);\r\n      }\r\n    };\r\n    fetchedCovidData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <img src={covidImg} className=\"covid-img\" alt=\"COVID-19\" />\r\n      <Cards data={covidData} />\r\n      <CountryPicker handleCountryChange={handleCountryChange} />\r\n      <Chart data={covidData} country={country} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}